#!/bin/bash


# RUTA DE INSTALACIÓN
INSTALL_DIR_ROOT="$HOME/.baustro"


# ORIGENES SOPORTADOS
# Se admiten solamente repositorios de Rhodecode 
# (en lugar de la IP se podrían usar los nombres de los repositorios o un patrón que combine ambos)
BLACK_LIST_FILE="${INSTALL_DIR_ROOT}/lista-negra.txt"


# PATRONES SOPORTADOS
# Patrón con el que debe cumplir el mensaje del commit
declare -a PATTERNS=(
	"^(REQ) #[[:digit:]]+ " 
	"^(REQ) [[:digit:]]+ "
	"^(REQUERIMIENTO) #[[:digit:]]+ " 
	"^(REQUERIMIENTO) [[:digit:]]+ "
)


check_message() {
	INPUT_FILE=$1
	START_LINE=`head -n1 $INPUT_FILE`
	satisfies=false 
	for pattern in "${PATTERNS[@]}"
	do
		if [[ $START_LINE =~ $pattern ]]
		then
		  satisfies=true
		  break
		fi
	done
	if [[ $satisfies = false ]]
	then
		print_message
		exit 1
	fi
}


print_message() {
	echo -e "\e[1;31m##########################\e[0m"
	echo -e "\e[1;31mERROR EN MENSAJE DE COMMIT\e[0m"
	echo -e "\e[1;31m##########################\e[0m"
	echo ">> El mensaje del commit no cumple con el estándar del Banco del Austro."
	echo ">> Revise los ejemplos: "
	echo "   REQ #123 mensaje del commit"
	echo "   REQ 123 mensaje del commit"
	echo "   REQUERIMIENTO #123 mensaje del commit"
	echo "   REQUERIMIENTO 123 mensaje del commit"
}


is_supported_origin() {
	OLDIFS=$IFS
	INPUT="${BLACK_LIST_FILE}"
	exist=false

	if [ -f $INPUT ]
	then
		IFS=$'\r\n' GLOBIGNORE='*' command eval  'lista_negra=($(cat $INPUT))'
		ORIGIN=$(git config --get remote.origin.url)
		for line in "${lista_negra[@]}"
		do
			if [[ $ORIGIN == *"$line"* ]]
			then
				exist=true
				break
			fi
		done
		IFS=$OLDIFS
	fi

	if [[ $exist = true ]]
	then
		return 0	# true in bash
	else
		return 1 	# false in bash
	fi
}


execute() {
	if is_supported_origin
	then
		check_message "$1"
	fi
}


# FUNCION PRINCIPAL
message="$1"
execute "$message"
